{"version":3,"sources":["components/nextArrow.js","components/prevArrow.js","components/App.js","serviceWorker.js","index.js"],"names":["Arrownext","props","_useState","useState","_useState2","Object","slicedToArray","mouse","setMouseOver","nextAnimate","useSpring","width","config","tension","friction","onHover","react_default","a","createElement","onClick","nextSlide","onMouseEnter","onMouseLeave","web","svg","viewBox","className","d","Arrowprev","prevAnimate","prevSlide","cards","Boolean","window","location","hostname","match","ReactDOM","render","count","setCount","_useState3","_useState4","nextArrow","nextToggled","_useState5","_useState6","prevArrow","prevToggled","transitions","useTransition","from","opacity","transform","enter","leave","display","mass","map","_ref","key","img","src","alt","style","length","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0abb4ec8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { animated, useSpring } from \"react-spring\";\nimport \"./App.css\";\n\nexport default function Arrownext(props) {\n  const [mouse, setMouseOver] = useState(false);\n\n  const nextAnimate = useSpring({\n    width: mouse ? \"13.8%\" : \"13%\",\n    config: { tension: 500, friction: 10 }\n  });\n\n  const onHover = () => {\n    setMouseOver(!mouse);\n  };\n\n  return (\n    <div\n      onClick={props.nextSlide}\n      onMouseEnter={onHover}\n      onMouseLeave={onHover}\n    >\n      <animated.svg\n        viewBox=\"0 0 100 100\"\n        className=\"nextSvg\"\n        width={nextAnimate.width} //changes the width based on mouse enter of leave from the useSpring hook style object\n      >\n        <path\n          d=\"M22.118,44.236C9.922,44.236,0,34.314,0,22.118S9.922,0,22.118,0s22.118,9.922,22.118,22.118S34.314,44.236,22.118,44.236\n\t\t\tz M22.118,1.5C10.75,1.5,1.5,10.749,1.5,22.118c0,11.368,9.25,20.618,20.618,20.618c11.37,0,20.618-9.25,20.618-20.618\n\t\t\tC42.736,10.749,33.488,1.5,22.118,1.5z\"\n        />\n        <path\n          d=\"M19.341,29.884c-0.192,0-0.384-0.073-0.53-0.22c-0.293-0.292-0.293-0.768,0-1.061l6.796-6.804l-6.796-6.803\n\t\t\tc-0.292-0.293-0.292-0.769,0-1.061c0.293-0.293,0.768-0.293,1.061,0l7.325,7.333c0.293,0.293,0.293,0.768,0,1.061l-7.325,7.333\n\t\t\tC19.725,29.811,19.533,29.884,19.341,29.884z\"\n        />\n      </animated.svg>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { animated, useSpring } from \"react-spring\";\nimport \"./App.css\";\n\nexport default function Arrowprev(props) {\n  const [mouse, setMouseOver] = useState(false);\n\n  const prevAnimate = useSpring({\n    width: mouse ? \"13.8%\" : \"13%\",\n    config: { tension: 500, friction: 10 }\n  });\n\n  const onHover = () => {\n    setMouseOver(!mouse);\n  };\n\n  return (\n    <div\n      onClick={props.prevSlide}\n      onMouseEnter={onHover}\n      onMouseLeave={onHover}\n    >\n      <animated.svg\n        viewBox=\"0 0 100 100\"\n        className=\"prevSvg\"\n        width={prevAnimate.width} //changes the width based on mouse enter of leave from the useSpring hook style object\n      >\n        <path\n          d=\"M22.119,44.237C9.922,44.237,0,34.315,0,22.119S9.922,0.001,22.119,0.001s22.119,9.922,22.119,22.118\n\t\t\tS34.314,44.237,22.119,44.237z M22.119,1.501C10.75,1.501,1.5,10.75,1.5,22.119c0,11.368,9.25,20.618,20.619,20.618\n\t\t\ts20.619-9.25,20.619-20.618C42.738,10.75,33.488,1.501,22.119,1.501z\"\n        />\n        <path\n          d=\"M24.667,29.884c-0.192,0-0.384-0.072-0.53-0.22l-7.328-7.334c-0.292-0.293-0.292-0.768,0-1.061l7.328-7.333\n\t\t\tc0.293-0.293,0.768-0.293,1.061,0s0.293,0.768,0,1.061L18.4,21.8l6.798,6.805c0.292,0.293,0.292,0.769,0,1.061\n\t\t\tC25.051,29.812,24.859,29.884,24.667,29.884z\"\n        />\n      </animated.svg>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport Arrownext from \"./nextArrow\";\nimport Arrowprev from \"./prevArrow\";\nimport \"./App.css\";\n\nconst cards = [\n  \"https://images.pexels.com/photos/1249214/pexels-photo-1249214.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n  \"https://images.pexels.com/photos/2067569/pexels-photo-2067569.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n  \"https://images.pexels.com/photos/1298684/pexels-photo-1298684.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n  \"https://images.pexels.com/photos/213399/pexels-photo-213399.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n  \"https://images.pexels.com/photos/1013328/pexels-photo-1013328.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"\n];\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n  const [nextArrow, nextToggled] = useState(false);\n  const [prevArrow, prevToggled] = useState(false);\n\n  //I did seek help for this main hook.  I used stack overflow, but by the time someone answered I had most of it figured out.\n  //I orignally was using \"useSpring\" for this animation, but found \"useTransition\" is better for an animation\n  //on every image change.  The only code I used from someone else was the first argument of the \"useTransition\" hook\n  //that is using \"count\" right now.  Orignally I was trying to pass the cards array there, and thought the animation\n  //would update in the \"animated.img\" in the return when state changed there in the src tag, but it needs to be tied\n  //directly to state, thus it's using the count from state to determine when to make an animation.\n  //This part was not easy to figure out because their documentation is not the best.\n  const transitions = useTransition(count, count, {\n    from: {\n      opacity: 0,\n      transform: \"translate3d(0,-50px,0)\" //using translate instead of marginTop fixed a bug that caused the image to glitch\n    },\n    enter: {\n      opacity: 1,\n      transform: \"translate3d(0,50px,0)\"\n    },\n    leave: { opacity: 0, display: \"none\" },\n    config: { mass: 1, tension: 75, friction: 6 } //physics logic\n  });\n\n  const prevSlide = () => {\n    let prevSlide = count - 1 < 0 ? cards.length - 1 : count - 1; //if count - 1 is less than one go to the last index, else subtract 1 from count\n    setCount(prevSlide);\n    prevToggled(!prevArrow);\n  };\n\n  const nextSlide = () => {\n    let nextSlide = count + 1 < cards.length ? count + 1 : 0; //if count + 1 is less than cards length, add one to count, else set count to 0\n    setCount(nextSlide);\n    nextToggled(!nextArrow);\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        {transitions.map((\n          { props, key } //take the style props and key which is the count from above and put it in animated.img\n        ) => (\n          <animated.img\n            src={cards[count]} //updating the source based on the index of the count\n            alt=\"carousel-img\"\n            key={key}\n            style={props} //the third argument from the useTransition hook from above\n          />\n        ))}\n      </div>\n      <Arrowprev prevSlide={prevSlide} prevArrow={prevArrow} />{\" \"}\n      {/* passing the count functions and the arrow toggle state to these components  */}\n      <Arrownext nextSlide={nextSlide} nextArrow={nextArrow} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}